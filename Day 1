Problem A. Пошаговый обход графа
Input file: standard input
Output file: standard output
Time limit: 2 секунды
Memory limit: 256 MiB
Пошаговым обходом графа из вершины v назовём последовательность вершин u1, u2, . . . , ur такую, что:
• u1 = ur = v,
• Каждая вершина графа, достижимая из v, встречается в ней хотя бы один раз, и
• Между любыми двумя соседними вершинами последовательности в графе существует ребро.
Задан связный неориентированный граф и его вершина v. Выведите любой пошаговый обход этого графа.
Input
В первой строке входного файла заданы числа N, M и v через пробел "— количество вершин и рёбер в графе
и начальная вершина обхода (1 ≤ N ≤ 100, 0 ≤ M ≤ 10 000, 1 ≤ v ≤ N). Следующие M строк содержат по
два числа ui и vi через пробел (1 ≤ ui
, vi ≤ N); каждая такая строка означает, что в графе существует ребро
между вершинами ui и vi
.
Output
В первой строке входного файла выведите число r "— количество вершин в найденном пошаговом обходе
(1 ≤ r ≤ 10 000; гарантируется, что обход, удовлетворяющий этим ограничениям, существует). Во второй
строке выведите сами числа u1, u2, . . . , ur через пробел.
Examples
standard input 
3 2 1
1 2
2 3
Ответ:
5
1 2 3 2 1

standard input
4 4 1
1 2
2 3
3 4
4 1
Ответ:
5
1 2 3 4 1




#include <bits/stdc++.h>

using namespace std;

int n;
const int MAXN = 100;
vector <vector <int> > g(MAXN);
vector <int> ans;


vector <int> used(MAXN);

void dfs(int v){
    ans.push_back(v + 1);
    used[v] = 1;
    for (int i = 0; i < g[v].size(); i++)
    {
        if (used[g[v][i]] == 0)

            dfs(g[v][i]);
            if (ans[ans.size() - 1] != v + 1)
                ans.push_back(v + 1);
    }

}


int main() {
    //freopen("lca.in", "r", stdin);
    //freopen("lca.out", "w", stdout);
    ios_base::sync_with_stdio(false);
    int n, m, u;
    cin >> n;
    cin >> m;
    cin >> u;
    int a, b;
    for (int i = 0; i < m; i++){
        cin >> a;
        cin >> b;
        g[a - 1].push_back(b - 1);
        g[b - 1].push_back(a - 1);
    }
    dfs(u - 1);
    cout << ans.size() << endl;
    for (int i = 0; i < ans.size(); i++){
        cout << ans[i] << " ";
    }


    return 0;
}












Problem B. Диаметр графа
Input file: standard input
Output file: standard output
Time limit: 1 second
Memory limit: 256 MiB
Дан связный взвешенный неориентированный граф.
Рассмотрим пару вершин, расстояние между которыми максимально среди всех пар вершин. Расстояние
между ними называется диаметром графа. Эксцентриситетом вершины v называется максимальное
расстояние от вершины v до других вершин графа. Радиусом графа называется наименьший из
эксцентриситетов вершин. Найдите диаметр и радиус графа.
Input
В первой строке входного файла единственное число: N (1 ≤ N ≤ 100) — количество вершин графа. В
следующих N строках по N чисел — матрица смежности графа, где -1 означает отсутствие ребра между
вершинами, а любое неотрицательное число — присутствие ребра данного веса. На главной диагонали
матрицы всегда нули; веса рёбер не превышают 1000.
Output
В выходной файл выведите два числа — диаметр и радиус графа.
Example
standard input 
4
0 -1 1 2
-1 0 -1 5
1 -1 0 4
2 5 4 0
standard output
8
5




#include <bits/stdc++.h>

using namespace std;
int main() {
    //freopen("lca.in", "r", stdin);
    //freopen("lca.out", "w", stdout);
    ios_base::sync_with_stdio(false);
    int n, m;
    cin >> n;
    vector <vector <int> > v(n, vector <int> (n));
    for (int i = 0; i < n; i++){
        for (int j = 0; j < n; j++){
            int t;
            cin >> t;
            if (t == -1)
                v[i][j] = 1e9 + 10;
            else
                v[i][j] = t;
        }
    }
    for (int k = 0; k < n; k++){
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                if (v[i][k] < 1e9 + 10 && v[k][j] < 1e9 + 10)
                    v[i][j] = min(v[i][j], v[i][k] + v[k][j]);
            }
        }
    }
    int comp = 0;
    int y = 1e9 + 10;
    for (int i = 0; i < n; i++){
        int q = 0;
        for (int j = 0; j < n; j++){
            if (v[i][j] > comp)
                comp = v[i][j];
            if (v[i][j] > q)
                q = v[i][j];
        }
        if (q < y)
            y = q;
    }
    cout << comp << endl;
    cout << y << endl;

    return 0;
}







Problem C. Spantree. Остовное дерево
Input file: standard input
Output file: standard output
Time limit: 2 секунды
Memory limit: 256 MiB
Требуется найти в связном графе остовное дерево минимального веса.
Input
Первая строка входного файла содержит два натуральных числа n и m — количество вершин и ребер
графа соответственно. Следующие m строк содержат описание ребер по одному на строке. Ребро номер
i описывается тремя натуральными числами bi
, ei и wi — номера концов ребра и его вес соответственно
(1 ≤ bi
, ei ≤ n, 0 ≤ wi ≤ 100 000). n ≤ 5 000, m ≤ 100 000.
Граф является связным.
Output
Первая строка выходного файла должна содержать одно натуральное число — вес минимального остовного
дерева.
Examples
standard input 
4 4
1 2 1
2 3 2
3 4 5
4 1 4
standard output
7




p = []

def get(v):
    if p[v - 1] == v:
        return v
    p[v - 1] = get(p[v - 1])
    return p[v - 1]


def unite(u, v):
    u = get(u)
    v = get(v)
    p[u - 1] = v


def main():
    #input_file = open("input.txt", "r")
    #output_file = open("output.txt", "w")
    line = input().split()
    n = int(line[0])
    m = int(line[1])
    a = []
    b = []
    c = []
    ans = 0

    for i in range(n):
        p.append(i + 1)

    pool = []

    for it in range(m):
        line = input().split()
        for i in range(3):
            line[i] = int(line[i])
        #line = [int(x) for x in line]
        pool.append(line)


    pool.sort(key=lambda line: line[2])

    for i in range(m):
        a.append(int(pool[i][0]))
        b.append(int(pool[i][1]))
        c.append(int(pool[i][2]))

    for i in range(m):
        if get(a[i]) != get(b[i]):
            ans += c[i]
            unite(a[i], b[i])

    print(ans)

    #output_file.write(str(ans) + "\n")
    #input_file.close()
    #output_file.close()


if __name__ == "__main__":
    main()
    
    
    
    
    
    
    
Problem F. Минимальный каркас
Input file: standard input
Output file: standard output
Time limit: 1 second
Memory limit: 256 MiB
Требуется найти в связном графе остовное дерево минимального веса.
Input
Первая строка входного файла содержит два натуральных числа n и m – количество вершин и ребер
графа соответственно (1 ≤ n ≤ 105
, 0 ≤ m ≤ 105
). Следующие m строк содержат описание ребер по одному
на строке. Ребро номер i описывается тремя натуральными числами bi
, ei и wi — номерами концов ребра и
его вес соответственно (1 ≤ bi
, ei ≤ n, 0 ≤ wi ≤ 105
).
Гарантируется, что граф связный.
Output
Выведите единственное число – вес минимального остовного дерева.
Examples
standard input 
4 4
1 2 1
2 3 2
3 4 5
4 1 4
standard output
7





#include <bits/stdc++.h>

using namespace std;

const int MAXN = 2e5 + 10;

vector <int> p(MAXN);

int get(int v){
    if (p[v - 1] == v)
        return v;
    p[v - 1] = get(p[v - 1]);
    return p[v - 1];
}

void unite(int u, int v){
    u = get(u);
    v = get(v);
    p[u - 1] = v;
}

bool sortFunc(const vector<int>& p1,
      const vector<int>& p2) {
return p1[2] < p2[2];
}

int main() {
    //freopen("lca.in", "r", stdin);
    //freopen("lca.out", "w", stdout);
    ios_base::sync_with_stdio(false);
    vector <vector <int> > v;
    vector <int> t;
    int n, m;
    cin >> n;
    cin >> m;
    for (int i = 0; i < n; i++){
        p[i] = i + 1;
    }
    int a, b, w;
    for (int i = 0; i < m; i++){
        cin >> a;
        cin >> b;
        cin >> w;
        t.push_back(a);
        t.push_back(b);
        t.push_back(w);
        v.push_back(t);
        t.clear();

    }
    int ans = 0;
    sort(v.begin(), v.end(), sortFunc);
    for (int i = 0; i < m; i++){
        if (get(v[i][0]) != get(v[i][1]))
            ans += v[i][2];
        unite(v[i][0], v[i][1]);
    }

    cout << ans;

    return 0;
}

















Problem M. Dice Game
Input file: standard input
Output file: standard output
Time limit: 1 second
Memory limit: 256 MiB
Гуннар и Эмма очень много играют в настольные игры; именно поэтому у них скопилось большое количество
игральных костей, не являющихся обычными шестигранными кубиками. Например, у ребят есть игральная
кость с 10 гранями, на которых написаны числа 47, 48, ..., 56.
В силу большого шторма в Стокгольме, Гуннар и Эмма застряли у себя дома на несколько часов. Они
сыграли во все имеющиеся у них игры, после чего придумали следующую игру. У каждого игрока есть две
кости, которые он или она бросает. Выигрывает игрок с большей суммой. Если обе суммы одинаковые, игра
завершается вничью. Каждая из четырех костей обладает следующим свойством: на гранях кости написаны
числа a, a + 1, ..., b − 1, b, где a и b - минимальное и максимальное из написанных чисел. Каждое число
написано ровно один раз, в силу чего кость имеет b − a + 1 граней.
Какой же из игроков имеет больше шансов на победу?
Input
В первой строке записаны четыре числа a1, b1, a2, b2, которые описывают игарльные кости Гуннара. На
гранях кости номер i записаны числа ai
, ai + 1, ..., bi
. Вы можете считать, что 1 ≤ ai ≤ bi ≤ 100, а также что
ai + 3 ≤ bi
.
Output
Выведите имя игрока, имеющего большие шансы на победу. Выведите “Tie”, если оба игрока имеют равные
шансы на победу. Формат вывода задан в примере к задаче.
Examples
standard input 
1 4 1 4
1 6 1 6
standard output
Emma


1 8 1 8
1 10 2 5
standard output
Tie



import math

def main():
    #input_file = open("input.txt", "r")
    #output_file = open("output.txt", "w")
    line = input().split()
    a1 = int(line[0])
    b1 = int(line[1])
    a2 = int(line[2])
    b2 = int(line[3])

    line = input().split()
    a11 = int(line[0])
    b11 = int(line[1])
    a22 = int(line[2])
    b22 = int(line[3])

    ans1 = (a1 + b1 + a2 + b2) / 2
    ans2 = (a11 + b11 + a22 + b22) / 2

    if ans1 > ans2:
        print("Gunnar")
    if ans1 == ans2:
        print("Tie")
    if ans1 < ans2:
        print("Emma")

    #output_file.write(str(ans) + "\n")
    #input_file.close()
    #output_file.close()


if __name__ == "__main__":
    main()

